- name: start Cuju
  hosts: cuju
  tasks:
    - name: replace kvm module to Cuju's kvm module
      become: yes
      command: ./reinsmodkvm.sh
      args:
        chdir: "{{ share_disk_path }}/Cuju/kvm"

    - name: boot vm on primary host(execute runvm.sh)
      command: "{{ item }}"
      with_items:
        - tmux new-session -d -s cuju -n runvm
        - tmux send-keys -t cuju:runvm "cd {{ cuju_script_path }}" Enter
        - tmux send-keys -t cuju:runvm "./runvm.sh" Enter
      when: ansible_ssh_host == primary_host_ip_1G

    - name: sleep 40s
      pause:
        seconds: 40
    
    - name: copy check_ssh.sh ssh_connet_primaryvm.sh
      copy:
        src: "{{ item }}"
        dest: "{{ cuju_script_path }}"
        mode: 0755
      with_items:
        - ./files/check_ssh.sh
        - ./files/ssh_connect_primaryvm.sh

    - name: check primary vm is on
      command: "./check_ssh.sh {{ guest_ip }} /home/{{ ansible_ssh_user }}/vm1.monitor"
      args:
        chdir: "{{ cuju_script_path }}"
      register: check_primary_vm
      when: ansible_ssh_host == primary_host_ip_1G

    - name: if primary vm off, quit this ansible
      fail:
        msg: primary vm boot unsuccessfully.
      when: hostvars['primary_host']['check_primary_vm'].stdout.find('0') == -1

    - name: start receiver(execute recv.sh)
      command: "{{ item }}"
      with_items:
        - tmux new-session -d -s cuju -n recv
        - tmux send-keys -t cuju:recv "cd {{ cuju_script_path }}" Enter
        - tmux send-keys -t cuju:recv "./recv.sh" Enter
      when: ansible_ssh_host == backup_host_ip_1G

    - name: sleep 40s
      pause:
        seconds: 40

    - name: enter FT mode(execute fdmode.sh)
      command: ./ftmode.sh
      args:
        chdir: "{{ cuju_script_path }}"
      when: ansible_ssh_host == primary_host_ip_1G
    
    - name: wait ft start
      pause:
        seconds: 60


- name: check cuju start successfully
  hosts: cuju
  tasks:

    - name: call failover
      become: yes
      shell: echo "cuju-failover" | nc -w 1 -U vm1r.monitor
      args:
        chdir: "/home/{{ ansible_ssh_user }}"
      when: ansible_ssh_host == backup_host_ip_1G

    - name: kill tmux session
      command: tmux kill-session -t cuju
      when: ansible_ssh_host == primary_host_ip_1G

    - name: sleep 30s
      pause:
        seconds: 30

    - name: check vm is alive
      command: "./check_ssh.sh {{ guest_ip }} /home/{{ ansible_ssh_user }}/vm1r.monitor"
      args:
        chdir: "{{ cuju_script_path }}"
      register: check_backup_vm
      when: ansible_ssh_host == backup_host_ip_1G

    - name: copy poweroff_vm.sh
      copy:
        src: ./files/poweroff_vm.sh
        dest: "{{ cuju_script_path }}"
        mode: 0755
      when: ansible_ssh_host == backup_host_ip_1G and check_backup_vm.stdout.find('0') != -1

    - name: poweroff vm
      command: "./poweroff_vm.sh {{ guest_ip }}"
      args:
        chdir: "{{ cuju_script_path }}"
      when: ansible_ssh_host == backup_host_ip_1G and check_backup_vm.stdout.find('0') != -1

    - name: sleep 30s
      pause:
        seconds: 30

    - name: kill tmux session
      command: tmux kill-session -t cuju
      when: ansible_ssh_host == backup_host_ip_1G

    - name: if Cuju ftmode unsuccessfully,show this
      fail:
        msg: Cuju ftmode unsuccessfully.
      when: hostvars['backup_host']['check_backup_vm'].stdout.find('0') == -1

    - name: show the vm state
      debug:
        msg: "{{ hostvars['backup_host']['check_backup_vm'].stdout }}"
      when: hostvars['backup_host']['check_backup_vm'].stdout.find('0') != -1